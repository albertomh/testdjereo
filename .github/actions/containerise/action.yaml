# Re-usable GitHub Action that builds a container and pushes it to a registry.
# Defaults to the GitHub Container Registry (ghcr.io).
#
# Usage:
#   ```
#   containerise:
#     runs-on: ubuntu-24.04
#     outputs:
#       image_address: ${{ steps.containerise.outputs.image_address }}
#     steps:
#       - uses: actions/checkout@v5
#       - run: |
#           echo "REPO_NAME=${GITHUB_REPOSITORY@L}" >> $GITHUB_ENV
#           echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
#       - id: containerise
#         uses: ./.github/actions/containerise
#         with:
#           dockerfile: _deploy/deploy.Dockerfile
#           username: ${{ github.actor }}
#           password: ${{ github.token }}
#           tags:
#             ghcr.io/${{ env.REPO_NAME }}/${{ github.ref_name }}:latest,
#             ghcr.io/${{ env.REPO_NAME }}/${{ github.ref_name }}:${{ env.SHA_SHORT }},
#             <registry>/<name>:<some-tag>,
#             ...
#   ```
#
# Output:
# `image_address` (str): the first tag passed to the `containerise` job definition.
# Use as eg. `docker run --rm ${{ needs.containerise.outputs.image_address }}`
#
# IMPORTANT!
# The following click-ops steps must be taken to allow this action to publish container
# images to the GitHub Container Registry (ghcr.io).
#
# Before the first run of the `containerise` job:
# 1. Navigate to <https://github.com/<user>/<repo>/settings/actions>
# 2. Under 'Workflow permissions' select the 'Read and write permissions' option.
# 3. Save changes.
#
# Additionally:
# 1. Navigate to <https://github.com/users/<user>/packages>
# 2. Select the package in question. This might be the repo name by itself or a
#    `<repo>/<branch>` reference.
# 3. Click 'Package settings' in the right-hand sidebar.
# 4. Under 'Manage Actions access' click the [Add Repository] button.
# 5. Select the repository this file belongs to.
# 6. Change the repository's role from 'Read' to 'Write'.

name: 'containerise'
description: 'Run all pre-commit hooks against the codebase'

inputs:
  username:
    description: 'Container registry username'
    required: true
  password:
    description: 'Container registry password'
    required: true
  tags:
    description: 'Tags to assign to the image'
    required: true
  dockerfile:
    description: 'Path to Dockerfile'
    required: false
    default: 'Dockerfile'
  registry:
    description: 'Container registry'
    required: false
    default: 'ghcr.io'
  platforms:
    description: 'Comma-separated list of architectures to target'
    required: false
    default: linux/amd64,linux/arm64  # for Intel-based VPS, Apple Silicon
  provenance:
    description: 'Whether to generate provenance attestation for the build'
    required: false
    # must be false for multi-arch builds with recent versions of 'build-push-action'
    # see https://github.com/docker/build-push-action/issues/773
    default: 'false'

outputs:
  image_address:
    description: 'The address of the image that was built and pushed'
    value: ${{ steps.set-output.outputs.image_address }}

runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v5
    - uses: docker/setup-buildx-action@v3
    - uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}
    - uses: docker/build-push-action@v6
      with:
        context: .
        file: ${{ inputs.dockerfile }}
        platforms: ${{ inputs.platforms }}
        push: true
        provenance: ${{ inputs.provenance }}
        tags: ${{ inputs.tags }}
    - name: Set output
      id: set-output
      shell: bash
      run: |
          FIRST_TAG=$(echo "${{ inputs.tags }}" | cut -d',' -f1)
          echo "image_address=$FIRST_TAG" >> "$GITHUB_OUTPUT"
